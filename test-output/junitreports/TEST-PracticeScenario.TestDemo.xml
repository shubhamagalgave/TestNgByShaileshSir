<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite skipped="75" hostname="Dell123" name="PracticeScenario.TestDemo" tests="77" failures="0" timestamp="2023-08-02T22:53:12 IST" time="55.865" errors="2">
  <testcase name="setUp" time="21.389" classname="PracticeScenario.TestDemo">
    <error type="org.openqa.selenium.WebDriverException" message="Timed out waiting for driver server to start.
Build info: version: &#039;3.141.59&#039;, revision: &#039;e82be7d358&#039;, time: &#039;2018-11-14T08:25:48&#039;
System info: host: &#039;DELL123&#039;, ip: &#039;192.168.111.114&#039;, os.name: &#039;Windows 8.1&#039;, os.arch: &#039;amd64&#039;, os.version: &#039;6.3&#039;, java.version: &#039;1.8.0_202&#039;
Driver info: driver.version: ChromeDriver">
      <![CDATA[org.openqa.selenium.WebDriverException: Timed out waiting for driver server to start.
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'DELL123', ip: '192.168.111.114', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '1.8.0_202'
Driver info: driver.version: ChromeDriver
at org.openqa.selenium.remote.service.DriverService.waitUntilAvailable(DriverService.java:202)
at org.openqa.selenium.remote.service.DriverService.start(DriverService.java:188)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:79)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.startSession(RemoteWebDriver.java:213)
at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:131)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:181)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:168)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:123)
at PracticeScenario.BaseTestutil.setUp(BaseTestutil.java:41)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:700)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:527)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
Caused by: org.openqa.selenium.net.UrlChecker$TimeoutException: Timed out waiting for [http://localhost:30913/status] to be available after 20003 ms
at org.openqa.selenium.net.UrlChecker.waitUntilAvailable(UrlChecker.java:100)
at org.openqa.selenium.remote.service.DriverService.waitUntilAvailable(DriverService.java:197)
... 36 more
Caused by: java.util.concurrent.TimeoutException
at java.util.concurrent.FutureTask.get(Unknown Source)
at com.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(SimpleTimeLimiter.java:156)
at org.openqa.selenium.net.UrlChecker.waitUntilAvailable(UrlChecker.java:75)
... 37 more
]]>
    </error>
  </testcase> <!-- setUp -->
  <system-out/>
  <testcase name="cookies" time="0.000" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- cookies -->
  <system-out/>
  <testcase name="cookies" time="34.476" classname="PracticeScenario.TestDemo">
    <error type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
at PracticeScenario.TestDemo.cookies(TestDemo.java:806)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
    </error>
  </testcase> <!-- cookies -->
  <system-out/>
  <testcase name="fileyUploadingWithJavascriptExecutorByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- fileyUploadingWithJavascriptExecutorByPawanSir -->
  <system-out/>
  <testcase name="fileyUploadingWithJavascriptExecutorByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- fileyUploadingWithJavascriptExecutorByPawanSir -->
  <system-out/>
  <testcase name="multiKeyboardAction" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- multiKeyboardAction -->
  <system-out/>
  <testcase name="multiKeyboardAction" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- multiKeyboardAction -->
  <system-out/>
  <testcase name="validateTextBy" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- validateTextBy -->
  <system-out/>
  <testcase name="validateTextBy" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- validateTextBy -->
  <system-out/>
  <testcase name="rightclickByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- rightclickByPawanSir -->
  <system-out/>
  <testcase name="rightclickByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- rightclickByPawanSir -->
  <system-out/>
  <testcase name="fileUploadByWithSendkeysByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- fileUploadByWithSendkeysByPawanSir -->
  <system-out/>
  <testcase name="fileUploadByWithSendkeysByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- fileUploadByWithSendkeysByPawanSir -->
  <system-out/>
  <testcase name="fileUploadByWithRobotClassByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- fileUploadByWithRobotClassByPawanSir -->
  <system-out/>
  <testcase name="handlingAutoSuggetionPopupwithPOM" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- handlingAutoSuggetionPopupwithPOM -->
  <system-out/>
  <testcase name="fileUploadByWithRobotClassByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- fileUploadByWithRobotClassByPawanSir -->
  <system-out/>
  <testcase name="handlingAutoSuggetionPopupwithPOM" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- handlingAutoSuggetionPopupwithPOM -->
  <system-out/>
  <testcase name="useOfJavaScriptExecutorUtilDrawBorder" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- useOfJavaScriptExecutorUtilDrawBorder -->
  <system-out/>
  <testcase name="useOfJavaScriptExecutorUtilDrawBorder" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- useOfJavaScriptExecutorUtilDrawBorder -->
  <system-out/>
  <testcase name="identifyLogoField" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- identifyLogoField -->
  <system-out/>
  <testcase name="identifyLogoField" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- identifyLogoField -->
  <system-out/>
  <testcase name="checkBoxScenarioQuestion" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- checkBoxScenarioQuestion -->
  <system-out/>
  <testcase name="checkBoxScenarioQuestion" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- checkBoxScenarioQuestion -->
  <system-out/>
  <testcase name="dragAndDropByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- dragAndDropByPawanSir -->
  <system-out/>
  <testcase name="calenderTableHandlingByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- calenderTableHandlingByPawanSir -->
  <system-out/>
  <testcase name="dragAndDropByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- dragAndDropByPawanSir -->
  <system-out/>
  <testcase name="calenderTableHandlingByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- calenderTableHandlingByPawanSir -->
  <system-out/>
  <testcase name="useOfJavaScriptErUtilDrawBorder" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- useOfJavaScriptErUtilDrawBorder -->
  <system-out/>
  <testcase name="useOfJavaScriptErUtilDrawBorder" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- useOfJavaScriptErUtilDrawBorder -->
  <system-out/>
  <testcase name="reusableLoginMethodUse" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- reusableLoginMethodUse -->
  <system-out/>
  <testcase name="reusableLoginMethodUse" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- reusableLoginMethodUse -->
  <system-out/>
  <testcase name="iframe" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- iframe -->
  <system-out/>
  <testcase name="iframe" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- iframe -->
  <system-out/>
  <testcase name="toolTipByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- toolTipByPawanSir -->
  <system-out/>
  <testcase name="toolTipByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- toolTipByPawanSir -->
  <system-out/>
  <testcase name="multiKeybrdAcon" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- multiKeybrdAcon -->
  <system-out/>
  <testcase name="multiKeybrdAcon" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- multiKeybrdAcon -->
  <system-out/>
  <testcase name="SoftAssertion" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- SoftAssertion -->
  <system-out/>
  <testcase name="SoftAssertion" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- SoftAssertion -->
  <system-out/>
  <testcase name="Assertion" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- Assertion -->
  <system-out/>
  <testcase name="Assertion" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- Assertion -->
  <system-out/>
  <testcase name="sliderByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- sliderByPawanSir -->
  <system-out/>
  <testcase name="sliderByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- sliderByPawanSir -->
  <system-out/>
  <testcase name="webTableHandlingByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- webTableHandlingByPawanSir -->
  <system-out/>
  <testcase name="webTableHandlingByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- webTableHandlingByPawanSir -->
  <system-out/>
  <testcase name="HardAssertUse" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- HardAssertUse -->
  <system-out/>
  <testcase name="HardAssertUse" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- HardAssertUse -->
  <system-out/>
  <testcase name="ScrollDownByJavaScriptExecutor" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- ScrollDownByJavaScriptExecutor -->
  <system-out/>
  <testcase name="ScrollDownByJavaScriptExecutor" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- ScrollDownByJavaScriptExecutor -->
  <system-out/>
  <testcase name="allConditionalMethod" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- allConditionalMethod -->
  <system-out/>
  <testcase name="allConditionalMethod" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- allConditionalMethod -->
  <system-out/>
  <testcase name="handleCheckboxByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- handleCheckboxByPawanSir -->
  <system-out/>
  <testcase name="handleCheckboxByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- handleCheckboxByPawanSir -->
  <system-out/>
  <testcase name="LinkTextandPartialLinkText" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- LinkTextandPartialLinkText -->
  <system-out/>
  <testcase name="allTheLinkOnWebApplication" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- allTheLinkOnWebApplication -->
  <system-out/>
  <testcase name="LinkTextandPartialLinkText" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- LinkTextandPartialLinkText -->
  <system-out/>
  <testcase name="allTheLinkOnWebApplication" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- allTheLinkOnWebApplication -->
  <system-out/>
  <testcase name="mouseHoverWithClickByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- mouseHoverWithClickByPawanSir -->
  <system-out/>
  <testcase name="mouseHoverWithClickByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- mouseHoverWithClickByPawanSir -->
  <system-out/>
  <testcase name="doubletClickByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- doubletClickByPawanSir -->
  <system-out/>
  <testcase name="doubletClickByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- doubletClickByPawanSir -->
  <system-out/>
  <testcase name="keyboardaction" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- keyboardaction -->
  <system-out/>
  <testcase name="keyboardaction" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- keyboardaction -->
  <system-out/>
  <testcase name="writingTheScriptInPOM" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- writingTheScriptInPOM -->
  <system-out/>
  <testcase name="writingTheScriptInPOM" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- writingTheScriptInPOM -->
  <system-out/>
  <testcase name="allNavigationCommand" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- allNavigationCommand -->
  <system-out/>
  <testcase name="allNavigationCommand" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- allNavigationCommand -->
  <system-out/>
  <testcase name="getTextIsNotWorking" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- getTextIsNotWorking -->
  <system-out/>
  <testcase name="getTextIsNotWorking" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- getTextIsNotWorking -->
  <system-out/>
  <testcase name="handlingAutoSuggetionPopups" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- handlingAutoSuggetionPopups -->
  <system-out/>
  <testcase name="handlingAutoSuggetionPopups" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- handlingAutoSuggetionPopups -->
  <system-out/>
  <testcase name="capturingScreenShotByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- capturingScreenShotByPawanSir -->
  <system-out/>
  <testcase name="capturingScreenShotByPawanSir" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- capturingScreenShotByPawanSir -->
  <system-out/>
  <testcase name="validateText" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- validateText -->
  <system-out/>
  <testcase name="validateText" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- validateText -->
  <system-out/>
  <testcase name="validateTextByPagesourceMethod" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- validateTextByPagesourceMethod -->
  <system-out/>
  <testcase name="validateTextByPagesourceMethod" classname="PracticeScenario.TestDemo">
    <skipped/>
  </testcase> <!-- validateTextByPagesourceMethod -->
  <system-out/>
</testsuite> <!-- PracticeScenario.TestDemo -->
